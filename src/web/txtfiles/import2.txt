
  <h2>SDK page 2</h2>
<p><b>1.1 Call Arguments</b>
<br>Each component of FRAMES is called with a given set of arguments.&nbsp;
The arguments are always as follows.
<ol>
<li>
FUIName (name without extension of files to be read)</li>

<li>
RunName (name of temporary files written by a module)</li>

<li>
Site# (number of currently executing site)</li>

<li>
Module# (module number of currently executing module)</li>

<li>
Name (name of currently executing module)</li>
</ol>
Basically, call arguments allow a component to know which files it
can read, write, and which module it is currently executing.&nbsp; The module
currently executing is necessary because many times the same module may
be used to simulate multiple media, and different invocations of the same
module need to know which invocation is being requested to run. A more
complete treatment of arguments is in FRAMES specifications.
<p><b>1.2 ERR File</b>
<br>The Error(ERR)file is the most important file in FRAMES system.&nbsp;
It is a mechanism used by FRAMES to insure that results that are in error
are not mistaken for valid results.&nbsp; To insure that any error (even an 
unexpected divide by zero) will be caught, FRAMES requires that every
module create an ERR file as the first step in processing for the UI or
model.&nbsp; Only when a UI or model reaches a successful end of
processing does it erase ERR file. This is the "guilty until proven
innocent" approach to error detection.&nbsp; The UI or model is assumed
to have erred, and only when it reaches a check point (end of program)
can it clear this error.&nbsp; The name of ERR file is RunName from
the call argument with an ERR extension.&nbsp; So if a module was called
with <i>"MyTest ~glyph 1 1 MyGlyph" </i>for arguments it would be expected
as the first step in process to open the file <i>~glyph.err</i> and
write some error message.&nbsp; This error message will appear when your
module terminates unexpectedly so the "Unexpected error in MyModule" is a good
example.
<p><b>1.3 GID File</b>
<br>The Global Input Data (GID) file contains all the connection and user
input data for a FRAMES module.&nbsp; For example, not only does the GID
file contain Bulk Density for a given vadose zone, it also contains
which media impacts&nbsp; that vadose zone as well as which media are impacted
by the vadose zone.&nbsp; All user data is required to be stored in a
GID file.&nbsp; There are two good reasons for doing this. 1) if the user
wants to share or copy a simulation to another machine, the only file to
copy is the GID file, and 2) a module like the Sensitivity/Uncertainty
module has access to all user data for those types of analyses.&nbsp;
So the strict definition of what is required by a FRAMES UI is it must
read the GID file for the values associated with the module. It must allow
the user to then change those values.&nbsp; It must write new values
to the temporary GID file. The specifications for this format are in
FRAMES specifications.
<p><b>1.3.1 Reading module sections in FRAMES specified files.</b>
<br>All FRAMES files contain sections for each module to read.&nbsp; This
feature allows a module to quickly skip data that it is not concerned
with and move to next section.&nbsp; A module marker consists of two
values on a line.&nbsp; The first is the module name and the second is the 
number of lines associated with this section.&nbsp; So the process of reading
a file consists of following&nbsp;
<ol>
<li>
Read marker name, marker number of lines</li>

<li>
If marker name matches section module is looking for begin
reading data</li>

<li>
If marker does not match section module is looking for&nbsp;</li>

<ol>
<li>
Read marker number of lines from file</li>

<li>
If not at end of file go to 1</li>
</ol>
</ol>
For example lets assume a module is to read following file and is looking
for "MyModule" section.
<p><i>"FUI",5</i>
<br><i>"Param1",0,0,0,0,0,"units",value</i>
<br><i>"Param2",0,0,0,0,0,"units",value</i>
<br><i>"Param3",0,0,0,0,0,"units",value</i>
<br><i>"Param4",0,0,0,0,0,"units",value</i>
<br><i>"Param5",0,0,0,0,0,"units",value</i>
<br><i>"MyModule",5</i>
<br><i>"Param1",0,0,0,0,0,"units",value</i>
<br><i>"Param2",0,0,0,0,0,"units",value</i>
<br><i>"Param3",0,0,0,0,0,"units",value</i>
<br><i>"Param4",0,0,0,0,0,"units",value</i>
<br><i>"Param5",0,0,0,0,0,"units",value</i>
<p>It is apparent that module would read first line of data then
determine next section is not "MyModule" section and read 5 lines.&nbsp;
Then it would read "MyModule" marker and determine that this is
appropriate section and begin reading Param1, Param2, etc.

<p>
 <hr size="1" color="#000080" noshade align="center" width="95%">
           <p style="margin-top: -2; margin-bottom: -2"> <p>
<b><a href="import.html">Introduction to SDK</b></a> - introduction page for Software Developer Kit.
<br><b>SDK 1.1-1.3</b> - Call Arguments, ERR file, GID file and Reading module sections in FRAMES specified files.
<br><a href="import3.html"><b>SDK 2.0</b></a> - Example of module inclusion
<br><a href="import4.html"><b>SDK Tools</b></a> - Software Development Tools
<p><a href="modules.html#import">Back to Module Development page.</a>
